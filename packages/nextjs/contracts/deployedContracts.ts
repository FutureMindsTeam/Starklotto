/**
 * This file is autogenerated by Scaffold-Stark.
 * You should not edit it manually or your changes might be overwritten.
 */

const deployedContracts = {
  devnet: {
    Lottery: {
      address:
        "0x19f2682599ee7fd597187558d89c6aafabdfcd2969231aa706f4d4dc88d16d6",
      abi: [
        {
          type: "impl",
          name: "LotteryImpl",
          interface_name: "contracts::Lottery::ILottery",
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            {
              name: "low",
              type: "core::integer::u128",
            },
            {
              name: "high",
              type: "core::integer::u128",
            },
          ],
        },
        {
          type: "enum",
          name: "core::bool",
          variants: [
            {
              name: "False",
              type: "()",
            },
            {
              name: "True",
              type: "()",
            },
          ],
        },
        {
          type: "struct",
          name: "contracts::Lottery::Ticket",
          members: [
            {
              name: "player",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "number1",
              type: "core::integer::u16",
            },
            {
              name: "number2",
              type: "core::integer::u16",
            },
            {
              name: "number3",
              type: "core::integer::u16",
            },
            {
              name: "number4",
              type: "core::integer::u16",
            },
            {
              name: "number5",
              type: "core::integer::u16",
            },
            {
              name: "claimed",
              type: "core::bool",
            },
            {
              name: "drawId",
              type: "core::integer::u64",
            },
            {
              name: "timestamp",
              type: "core::integer::u64",
            },
          ],
        },
        {
          type: "interface",
          name: "contracts::Lottery::ILottery",
          items: [
            {
              type: "function",
              name: "Initialize",
              inputs: [
                {
                  name: "ticketPrice",
                  type: "core::integer::u256",
                },
                {
                  name: "accumulatedPrize",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "BuyTicket",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "numbers",
                  type: "core::array::Array::<core::integer::u16>",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "DrawNumbers",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "ClaimPrize",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "ticketId",
                  type: "core::felt252",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "CheckMatches",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "number1",
                  type: "core::integer::u16",
                },
                {
                  name: "number2",
                  type: "core::integer::u16",
                },
                {
                  name: "number3",
                  type: "core::integer::u16",
                },
                {
                  name: "number4",
                  type: "core::integer::u16",
                },
                {
                  name: "number5",
                  type: "core::integer::u16",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u8",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "CreateNewDraw",
              inputs: [
                {
                  name: "accumulatedPrize",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "GetAccumulatedPrize",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetFixedPrize",
              inputs: [
                {
                  name: "matches",
                  type: "core::integer::u8",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetDrawStatus",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetUserTickets",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "player",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::array::Array::<core::felt252>",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetUserTicketsCount",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "player",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u32",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetTicketInfo",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
                {
                  name: "ticketId",
                  type: "core::felt252",
                },
                {
                  name: "player",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "contracts::Lottery::Ticket",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetTicketCurrentId",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u64",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "GetWinningNumbers",
              inputs: [
                {
                  name: "drawId",
                  type: "core::integer::u64",
                },
              ],
              outputs: [
                {
                  type: "core::array::Array::<core::integer::u16>",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "OwnableImpl",
          interface_name: "openzeppelin_access::ownable::interface::IOwnable",
        },
        {
          type: "interface",
          name: "openzeppelin_access::ownable::interface::IOwnable",
          items: [
            {
              type: "function",
              name: "owner",
              inputs: [],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer_ownership",
              inputs: [
                {
                  name: "new_owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_ownership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnershipTransferred",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
              kind: "nested",
            },
            {
              name: "OwnershipTransferStarted",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::Lottery::Lottery::TicketPurchased",
          kind: "struct",
          members: [
            {
              name: "drawId",
              type: "core::integer::u64",
              kind: "key",
            },
            {
              name: "player",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "ticketId",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "numbers",
              type: "core::array::Array::<core::integer::u16>",
              kind: "data",
            },
            {
              name: "ticketCount",
              type: "core::integer::u32",
              kind: "data",
            },
            {
              name: "timestamp",
              type: "core::integer::u64",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::Lottery::Lottery::DrawCompleted",
          kind: "struct",
          members: [
            {
              name: "drawId",
              type: "core::integer::u64",
              kind: "data",
            },
            {
              name: "winningNumbers",
              type: "core::array::Array::<core::integer::u16>",
              kind: "data",
            },
            {
              name: "accumulatedPrize",
              type: "core::integer::u256",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::Lottery::Lottery::PrizeClaimed",
          kind: "struct",
          members: [
            {
              name: "drawId",
              type: "core::integer::u64",
              kind: "key",
            },
            {
              name: "player",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "ticketId",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "prizeAmount",
              type: "core::integer::u256",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::Lottery::Lottery::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnableEvent",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
              kind: "flat",
            },
            {
              name: "TicketPurchased",
              type: "contracts::Lottery::Lottery::TicketPurchased",
              kind: "nested",
            },
            {
              name: "DrawCompleted",
              type: "contracts::Lottery::Lottery::DrawCompleted",
              kind: "nested",
            },
            {
              name: "PrizeClaimed",
              type: "contracts::Lottery::Lottery::PrizeClaimed",
              kind: "nested",
            },
          ],
        },
      ],
      classHash:
        "0x78c9c4de67a74a7d30b3b166b9fe2ca4eab8af7e873c8d345bd1004e33f43f8",
    },
    StarkPlayERC20: {
      address:
        "0x383bbb33444bc01fba541317c72c34dddfa7eb7e05d47f3b449f812ad94bb08",
      abi: [
        {
          type: "impl",
          name: "MintableImpl",
          interface_name: "contracts::StarkPlayERC20::IMintable",
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            {
              name: "low",
              type: "core::integer::u128",
            },
            {
              name: "high",
              type: "core::integer::u128",
            },
          ],
        },
        {
          type: "interface",
          name: "contracts::StarkPlayERC20::IMintable",
          items: [
            {
              type: "function",
              name: "mint",
              inputs: [
                {
                  name: "recipient",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "grant_minter_role",
              inputs: [
                {
                  name: "minter",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "revoke_minter_role",
              inputs: [
                {
                  name: "minter",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "set_minter_allowance",
              inputs: [
                {
                  name: "minter",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "allowance",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "get_minter_allowance",
              inputs: [
                {
                  name: "minter",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_authorized_minters",
              inputs: [],
              outputs: [
                {
                  type: "core::array::Array::<core::starknet::contract_address::ContractAddress>",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "BurnableImpl",
          interface_name: "contracts::StarkPlayERC20::IBurnable",
        },
        {
          type: "interface",
          name: "contracts::StarkPlayERC20::IBurnable",
          items: [
            {
              type: "function",
              name: "burn",
              inputs: [
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "burn_from",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "grant_burner_role",
              inputs: [
                {
                  name: "burner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "revoke_burner_role",
              inputs: [
                {
                  name: "burner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "set_burner_allowance",
              inputs: [
                {
                  name: "burner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "allowance",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "get_burner_allowance",
              inputs: [
                {
                  name: "burner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_authorized_burners",
              inputs: [],
              outputs: [
                {
                  type: "core::array::Array::<core::starknet::contract_address::ContractAddress>",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "PrizeTokenImpl",
          interface_name: "contracts::StarkPlayERC20::IPrizeToken",
        },
        {
          type: "interface",
          name: "contracts::StarkPlayERC20::IPrizeToken",
          items: [
            {
              type: "function",
              name: "assign_prize_tokens",
              inputs: [
                {
                  name: "recipient",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "get_prize_balance",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "grant_prize_assigner_role",
              inputs: [
                {
                  name: "assigner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "revoke_prize_assigner_role",
              inputs: [
                {
                  name: "assigner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "UpgradeableImpl",
          interface_name: "openzeppelin_upgrades::interface::IUpgradeable",
        },
        {
          type: "interface",
          name: "openzeppelin_upgrades::interface::IUpgradeable",
          items: [
            {
              type: "function",
              name: "upgrade",
              inputs: [
                {
                  name: "new_class_hash",
                  type: "core::starknet::class_hash::ClassHash",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "ERC20MixinImpl",
          interface_name: "openzeppelin_token::erc20::interface::IERC20Mixin",
        },
        {
          type: "enum",
          name: "core::bool",
          variants: [
            {
              name: "False",
              type: "()",
            },
            {
              name: "True",
              type: "()",
            },
          ],
        },
        {
          type: "struct",
          name: "core::byte_array::ByteArray",
          members: [
            {
              name: "data",
              type: "core::array::Array::<core::bytes_31::bytes31>",
            },
            {
              name: "pending_word",
              type: "core::felt252",
            },
            {
              name: "pending_word_len",
              type: "core::integer::u32",
            },
          ],
        },
        {
          type: "interface",
          name: "openzeppelin_token::erc20::interface::IERC20Mixin",
          items: [
            {
              type: "function",
              name: "total_supply",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "balance_of",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "allowance",
              inputs: [
                {
                  name: "owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "spender",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer",
              inputs: [
                {
                  name: "recipient",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "transfer_from",
              inputs: [
                {
                  name: "sender",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "recipient",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "approve",
              inputs: [
                {
                  name: "spender",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "name",
              inputs: [],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "symbol",
              inputs: [],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "decimals",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u8",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "totalSupply",
              inputs: [],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "balanceOf",
              inputs: [
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transferFrom",
              inputs: [
                {
                  name: "sender",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "recipient",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "amount",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "PausableImpl",
          interface_name: "openzeppelin_security::interface::IPausable",
        },
        {
          type: "interface",
          name: "openzeppelin_security::interface::IPausable",
          items: [
            {
              type: "function",
              name: "is_paused",
              inputs: [],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "impl",
          name: "AccessControlMixinImpl",
          interface_name:
            "openzeppelin_access::accesscontrol::interface::AccessControlABI",
        },
        {
          type: "interface",
          name: "openzeppelin_access::accesscontrol::interface::AccessControlABI",
          items: [
            {
              type: "function",
              name: "has_role",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_role_admin",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
              ],
              outputs: [
                {
                  type: "core::felt252",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "grant_role",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "revoke_role",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_role",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "hasRole",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "getRoleAdmin",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
              ],
              outputs: [
                {
                  type: "core::felt252",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "grantRole",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "revokeRole",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounceRole",
              inputs: [
                {
                  name: "role",
                  type: "core::felt252",
                },
                {
                  name: "account",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "supports_interface",
              inputs: [
                {
                  name: "interface_id",
                  type: "core::felt252",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "recipient",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "admin",
              type: "core::starknet::contract_address::ContractAddress",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc20::erc20::ERC20Component::Transfer",
          kind: "struct",
          members: [
            {
              name: "from",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "to",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "value",
              type: "core::integer::u256",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc20::erc20::ERC20Component::Approval",
          kind: "struct",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "spender",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "value",
              type: "core::integer::u256",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc20::erc20::ERC20Component::Event",
          kind: "enum",
          variants: [
            {
              name: "Transfer",
              type: "openzeppelin_token::erc20::erc20::ERC20Component::Transfer",
              kind: "nested",
            },
            {
              name: "Approval",
              type: "openzeppelin_token::erc20::erc20::ERC20Component::Approval",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Paused",
          kind: "struct",
          members: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Unpaused",
          kind: "struct",
          members: [
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_security::pausable::PausableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "Paused",
              type: "openzeppelin_security::pausable::PausableComponent::Paused",
              kind: "nested",
            },
            {
              name: "Unpaused",
              type: "openzeppelin_security::pausable::PausableComponent::Unpaused",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleGranted",
          kind: "struct",
          members: [
            {
              name: "role",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
            {
              name: "sender",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleRevoked",
          kind: "struct",
          members: [
            {
              name: "role",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "account",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
            {
              name: "sender",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleAdminChanged",
          kind: "struct",
          members: [
            {
              name: "role",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "previous_admin_role",
              type: "core::felt252",
              kind: "data",
            },
            {
              name: "new_admin_role",
              type: "core::felt252",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "RoleGranted",
              type: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleGranted",
              kind: "nested",
            },
            {
              name: "RoleRevoked",
              type: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleRevoked",
              kind: "nested",
            },
            {
              name: "RoleAdminChanged",
              type: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::RoleAdminChanged",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_introspection::src5::SRC5Component::Event",
          kind: "enum",
          variants: [],
        },
        {
          type: "event",
          name: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded",
          kind: "struct",
          members: [
            {
              name: "class_hash",
              type: "core::starknet::class_hash::ClassHash",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "Upgraded",
              type: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Upgraded",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::Burn",
          kind: "struct",
          members: [
            {
              name: "burner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::Mint",
          kind: "struct",
          members: [
            {
              name: "recipient",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::MinterAllowanceSet",
          kind: "struct",
          members: [
            {
              name: "minter",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "allowance",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::BurnerAllowanceSet",
          kind: "struct",
          members: [
            {
              name: "burner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "allowance",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::PrizeTokensAssigned",
          kind: "struct",
          members: [
            {
              name: "recipient",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayERC20::StarkPlayERC20::Event",
          kind: "enum",
          variants: [
            {
              name: "ERC20Event",
              type: "openzeppelin_token::erc20::erc20::ERC20Component::Event",
              kind: "flat",
            },
            {
              name: "PausableEvent",
              type: "openzeppelin_security::pausable::PausableComponent::Event",
              kind: "flat",
            },
            {
              name: "AccessControlEvent",
              type: "openzeppelin_access::accesscontrol::accesscontrol::AccessControlComponent::Event",
              kind: "flat",
            },
            {
              name: "SRC5Event",
              type: "openzeppelin_introspection::src5::SRC5Component::Event",
              kind: "flat",
            },
            {
              name: "UpgradeableEvent",
              type: "openzeppelin_upgrades::upgradeable::UpgradeableComponent::Event",
              kind: "flat",
            },
            {
              name: "Burn",
              type: "contracts::StarkPlayERC20::StarkPlayERC20::Burn",
              kind: "nested",
            },
            {
              name: "Mint",
              type: "contracts::StarkPlayERC20::StarkPlayERC20::Mint",
              kind: "nested",
            },
            {
              name: "MinterAllowanceSet",
              type: "contracts::StarkPlayERC20::StarkPlayERC20::MinterAllowanceSet",
              kind: "nested",
            },
            {
              name: "BurnerAllowanceSet",
              type: "contracts::StarkPlayERC20::StarkPlayERC20::BurnerAllowanceSet",
              kind: "nested",
            },
            {
              name: "PrizeTokensAssigned",
              type: "contracts::StarkPlayERC20::StarkPlayERC20::PrizeTokensAssigned",
              kind: "nested",
            },
          ],
        },
      ],
      classHash:
        "0x2f1ed0054b4fea83d34a0bcedabea240800d13e0c5c303139ecd8ed18fc533a",
    },
    StarkPlayVault: {
      address:
        "0x66b189f6c032db2f9dcfe7b3a96c4658b654526515b578139c16f21caeeb37b",
      abi: [
        {
          type: "impl",
          name: "OwnableImpl",
          interface_name: "openzeppelin_access::ownable::interface::IOwnable",
        },
        {
          type: "interface",
          name: "openzeppelin_access::ownable::interface::IOwnable",
          items: [
            {
              type: "function",
              name: "owner",
              inputs: [],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer_ownership",
              inputs: [
                {
                  name: "new_owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_ownership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "starkPlayToken",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "feePercentage",
              type: "core::integer::u64",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnershipTransferred",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
              kind: "nested",
            },
            {
              name: "OwnershipTransferStarted",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
              kind: "nested",
            },
          ],
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            {
              name: "low",
              type: "core::integer::u128",
            },
            {
              name: "high",
              type: "core::integer::u128",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::STRKDeposited",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::STRKWithdrawn",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayMinted",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayBurned",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::Paused",
          kind: "struct",
          members: [
            {
              name: "admin",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::Unpaused",
          kind: "struct",
          members: [
            {
              name: "admin",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayBurnedByOwner",
          kind: "struct",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::FeeCollected",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
            {
              name: "accumulatedFee",
              type: "core::integer::u256",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::ConvertedToSTRK",
          kind: "struct",
          members: [
            {
              name: "user",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "amount",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::StarkPlayVault::StarkPlayVault::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnableEvent",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
              kind: "flat",
            },
            {
              name: "STRKDeposited",
              type: "contracts::StarkPlayVault::StarkPlayVault::STRKDeposited",
              kind: "nested",
            },
            {
              name: "STRKWithdrawn",
              type: "contracts::StarkPlayVault::StarkPlayVault::STRKWithdrawn",
              kind: "nested",
            },
            {
              name: "StarkPlayMinted",
              type: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayMinted",
              kind: "nested",
            },
            {
              name: "StarkPlayBurned",
              type: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayBurned",
              kind: "nested",
            },
            {
              name: "Paused",
              type: "contracts::StarkPlayVault::StarkPlayVault::Paused",
              kind: "nested",
            },
            {
              name: "Unpaused",
              type: "contracts::StarkPlayVault::StarkPlayVault::Unpaused",
              kind: "nested",
            },
            {
              name: "StarkPlayBurnedByOwner",
              type: "contracts::StarkPlayVault::StarkPlayVault::StarkPlayBurnedByOwner",
              kind: "nested",
            },
            {
              name: "FeeCollected",
              type: "contracts::StarkPlayVault::StarkPlayVault::FeeCollected",
              kind: "nested",
            },
            {
              name: "ConvertedToSTRK",
              type: "contracts::StarkPlayVault::StarkPlayVault::ConvertedToSTRK",
              kind: "nested",
            },
          ],
        },
      ],
      classHash:
        "0x23ca3229e3818ee513d4407566bba0ce4e8dd0968d1ebf301423e00c976b769",
    },
    LottoTicketNFT: {
      address:
        "0x2708522e7f19e584b8db7550d497bfb08583b47183cab06c162675582368f55",
      abi: [
        {
          type: "impl",
          name: "LottoTicketNFTImpl",
          interface_name: "contracts::LottoTicketNFT::ILottoTicketNFT",
        },
        {
          type: "struct",
          name: "core::byte_array::ByteArray",
          members: [
            {
              name: "data",
              type: "core::array::Array::<core::bytes_31::bytes31>",
            },
            {
              name: "pending_word",
              type: "core::felt252",
            },
            {
              name: "pending_word_len",
              type: "core::integer::u32",
            },
          ],
        },
        {
          type: "struct",
          name: "core::integer::u256",
          members: [
            {
              name: "low",
              type: "core::integer::u128",
            },
            {
              name: "high",
              type: "core::integer::u128",
            },
          ],
        },
        {
          type: "enum",
          name: "core::bool",
          variants: [
            {
              name: "False",
              type: "()",
            },
            {
              name: "True",
              type: "()",
            },
          ],
        },
        {
          type: "enum",
          name: "contracts::LottoTicketNFT::LottoStatus",
          variants: [
            {
              name: "Active",
              type: "()",
            },
            {
              name: "Completed",
              type: "()",
            },
            {
              name: "Claimed",
              type: "()",
            },
          ],
        },
        {
          type: "struct",
          name: "contracts::LottoTicketNFT::TicketDetails",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "lotto_id",
              type: "core::integer::u64",
            },
            {
              name: "ticket_id",
              type: "core::integer::u256",
            },
            {
              name: "chosen_numbers",
              type: "(core::integer::u16, core::integer::u16, core::integer::u16, core::integer::u16, core::integer::u16)",
            },
            {
              name: "is_winner",
              type: "core::bool",
            },
            {
              name: "prize_amount",
              type: "core::integer::u256",
            },
            {
              name: "timestamp",
              type: "core::integer::u64",
            },
            {
              name: "lotto_status",
              type: "contracts::LottoTicketNFT::LottoStatus",
            },
          ],
        },
        {
          type: "interface",
          name: "contracts::LottoTicketNFT::ILottoTicketNFT",
          items: [
            {
              type: "function",
              name: "name",
              inputs: [],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "symbol",
              inputs: [],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "token_uri",
              inputs: [
                {
                  name: "token_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::byte_array::ByteArray",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "get_ticket_metadata",
              inputs: [
                {
                  name: "token_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "contracts::LottoTicketNFT::TicketDetails",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "exists",
              inputs: [
                {
                  name: "token_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::bool",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "owner_of",
              inputs: [
                {
                  name: "token_id",
                  type: "core::integer::u256",
                },
              ],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "mint_ticket",
              inputs: [
                {
                  name: "to",
                  type: "core::starknet::contract_address::ContractAddress",
                },
                {
                  name: "lotto_id",
                  type: "core::integer::u64",
                },
                {
                  name: "num1",
                  type: "core::integer::u16",
                },
                {
                  name: "num2",
                  type: "core::integer::u16",
                },
                {
                  name: "num3",
                  type: "core::integer::u16",
                },
                {
                  name: "num4",
                  type: "core::integer::u16",
                },
                {
                  name: "num5",
                  type: "core::integer::u16",
                },
              ],
              outputs: [
                {
                  type: "core::integer::u256",
                },
              ],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "update_ticket_status",
              inputs: [
                {
                  name: "token_id",
                  type: "core::integer::u256",
                },
                {
                  name: "is_winner",
                  type: "core::bool",
                },
                {
                  name: "prize_amount",
                  type: "core::integer::u256",
                },
                {
                  name: "lotto_status",
                  type: "contracts::LottoTicketNFT::LottoStatus",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "set_lottery_contract",
              inputs: [
                {
                  name: "lottery_contract",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "set_base_uri",
              inputs: [
                {
                  name: "base_uri",
                  type: "core::byte_array::ByteArray",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "impl",
          name: "OwnableImpl",
          interface_name: "openzeppelin_access::ownable::interface::IOwnable",
        },
        {
          type: "interface",
          name: "openzeppelin_access::ownable::interface::IOwnable",
          items: [
            {
              type: "function",
              name: "owner",
              inputs: [],
              outputs: [
                {
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              state_mutability: "view",
            },
            {
              type: "function",
              name: "transfer_ownership",
              inputs: [
                {
                  name: "new_owner",
                  type: "core::starknet::contract_address::ContractAddress",
                },
              ],
              outputs: [],
              state_mutability: "external",
            },
            {
              type: "function",
              name: "renounce_ownership",
              inputs: [],
              outputs: [],
              state_mutability: "external",
            },
          ],
        },
        {
          type: "constructor",
          name: "constructor",
          inputs: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
            },
            {
              name: "name",
              type: "core::byte_array::ByteArray",
            },
            {
              name: "symbol",
              type: "core::byte_array::ByteArray",
            },
            {
              name: "base_uri",
              type: "core::byte_array::ByteArray",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc721::erc721::ERC721Component::Transfer",
          kind: "struct",
          members: [
            {
              name: "from",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "to",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "token_id",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc721::erc721::ERC721Component::Approval",
          kind: "struct",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "approved",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "token_id",
              type: "core::integer::u256",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc721::erc721::ERC721Component::ApprovalForAll",
          kind: "struct",
          members: [
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "operator",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "approved",
              type: "core::bool",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_token::erc721::erc721::ERC721Component::Event",
          kind: "enum",
          variants: [
            {
              name: "Transfer",
              type: "openzeppelin_token::erc721::erc721::ERC721Component::Transfer",
              kind: "nested",
            },
            {
              name: "Approval",
              type: "openzeppelin_token::erc721::erc721::ERC721Component::Approval",
              kind: "nested",
            },
            {
              name: "ApprovalForAll",
              type: "openzeppelin_token::erc721::erc721::ERC721Component::ApprovalForAll",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_introspection::src5::SRC5Component::Event",
          kind: "enum",
          variants: [],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
          kind: "struct",
          members: [
            {
              name: "previous_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "new_owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
          ],
        },
        {
          type: "event",
          name: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
          kind: "enum",
          variants: [
            {
              name: "OwnershipTransferred",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferred",
              kind: "nested",
            },
            {
              name: "OwnershipTransferStarted",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::OwnershipTransferStarted",
              kind: "nested",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::LottoTicketNFT::LottoTicketNFT::TicketMinted",
          kind: "struct",
          members: [
            {
              name: "token_id",
              type: "core::integer::u256",
              kind: "key",
            },
            {
              name: "owner",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "lotto_id",
              type: "core::integer::u64",
              kind: "data",
            },
            {
              name: "numbers",
              type: "(core::integer::u16, core::integer::u16, core::integer::u16, core::integer::u16, core::integer::u16)",
              kind: "data",
            },
            {
              name: "timestamp",
              type: "core::integer::u64",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::LottoTicketNFT::LottoTicketNFT::TicketStatusUpdated",
          kind: "struct",
          members: [
            {
              name: "token_id",
              type: "core::integer::u256",
              kind: "key",
            },
            {
              name: "is_winner",
              type: "core::bool",
              kind: "data",
            },
            {
              name: "prize_amount",
              type: "core::integer::u256",
              kind: "data",
            },
            {
              name: "lotto_status",
              type: "contracts::LottoTicketNFT::LottoStatus",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::LottoTicketNFT::LottoTicketNFT::TransferBlocked",
          kind: "struct",
          members: [
            {
              name: "token_id",
              type: "core::integer::u256",
              kind: "key",
            },
            {
              name: "from",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "key",
            },
            {
              name: "to",
              type: "core::starknet::contract_address::ContractAddress",
              kind: "data",
            },
          ],
        },
        {
          type: "event",
          name: "contracts::LottoTicketNFT::LottoTicketNFT::Event",
          kind: "enum",
          variants: [
            {
              name: "ERC721Event",
              type: "openzeppelin_token::erc721::erc721::ERC721Component::Event",
              kind: "flat",
            },
            {
              name: "SRC5Event",
              type: "openzeppelin_introspection::src5::SRC5Component::Event",
              kind: "flat",
            },
            {
              name: "OwnableEvent",
              type: "openzeppelin_access::ownable::ownable::OwnableComponent::Event",
              kind: "flat",
            },
            {
              name: "TicketMinted",
              type: "contracts::LottoTicketNFT::LottoTicketNFT::TicketMinted",
              kind: "nested",
            },
            {
              name: "TicketStatusUpdated",
              type: "contracts::LottoTicketNFT::LottoTicketNFT::TicketStatusUpdated",
              kind: "nested",
            },
            {
              name: "TransferBlocked",
              type: "contracts::LottoTicketNFT::LottoTicketNFT::TransferBlocked",
              kind: "nested",
            },
          ],
        },
      ],
      classHash:
        "0x2d83b9d9cfae6a90d909c33a6211d367f29fe94cdee998bdb9083a333640471",
    },
  },
} as const;

export default deployedContracts;
