name: Next.js CI

on:
  push:
    paths:
      - "packages/snfoundry/contracts/**"
      - "packages/nextjs/**"
  pull_request:
    branches:
      - main
    paths:
      - "packages/nextjs/**"
      - "packages/snfoundry/contracts/**"

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [lts/*]

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install scarb
        run: curl --proto '=https' --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh -s -- -v 2.9.2

      - name: Verify scarb installation
        run: |
          scarb --version
          echo "Scarb installation directory: $(which scarb)"

      - name: Install snfoundryup
        run: curl -L https://raw.githubusercontent.com/foundry-rs/starknet-foundry/master/scripts/install.sh | sh

      - name: Install snforge
        run: snfoundryup -v 0.34.0

      - name: Verify snforge installation
        run: |
          snforge --version
          echo "SNforge installation directory: $(which snforge)"

      - name: Clear build cache
        run: |
          rm -rf ~/.cache/scarb
          rm -rf ~/.cache/snfoundry
          echo "Cleared build caches"

      - name: Build snfoundry dependencies
        run: cd packages/snfoundry && yarn install --immutable && yarn compile

      - name: Debug directory structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing directory structure:"
          find ./packages/snfoundry -name "Scarb.toml" -type f | sort
          if [ -f ./packages/snfoundry/contracts/Scarb.toml ]; then
            echo "Scarb.toml exists at expected path"
            cat ./packages/snfoundry/contracts/Scarb.toml
          else
            echo "ERROR: Scarb.toml does not exist at expected path"
            exit 1
          fi

      - name: Fix potential format issues in Scarb.toml
        run: |
          cd ./packages/snfoundry/contracts
          # Recreate the Scarb.toml file with proper formatting to avoid any hidden characters
          echo '[package]' > Scarb.toml.new
          echo 'name = "contracts"' >> Scarb.toml.new
          echo 'version = "0.2.0"' >> Scarb.toml.new
          echo 'edition = "2023_11"' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '# See more keys and their definitions at https://docs.swmansion.com/scarb/docs/reference/manifest.html' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[dependencies]' >> Scarb.toml.new
          echo 'starknet = "2.9.2"' >> Scarb.toml.new
          echo '# Change to just "openzeppelin" to use full features' >> Scarb.toml.new
          echo 'openzeppelin_access = "0.20.0"' >> Scarb.toml.new
          echo 'openzeppelin_token = "0.20.0"' >> Scarb.toml.new
          echo 'openzeppelin_upgrades = "0.20.0"' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[dev-dependencies]' >> Scarb.toml.new
          echo 'openzeppelin_utils = "0.20.0"' >> Scarb.toml.new
          echo 'snforge_std = "0.34.0"' >> Scarb.toml.new
          echo 'cairo_test = "2.9.2"' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[[target.starknet-contract]]' >> Scarb.toml.new
          echo 'sierra = true' >> Scarb.toml.new
          echo 'casm = true' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[tool.fmt]' >> Scarb.toml.new
          echo 'sort-module-level-items = true' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[[tool.snforge.fork]]' >> Scarb.toml.new
          echo 'name = "SEPOLIA_LATEST"' >> Scarb.toml.new
          echo 'url = "https://starknet-sepolia.public.blastapi.io/rpc/v0_7"' >> Scarb.toml.new
          echo 'block_id.tag = "latest"' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[tool.snforge]' >> Scarb.toml.new
          echo 'exit_first = true' >> Scarb.toml.new
          echo '' >> Scarb.toml.new
          echo '[profile.dev.cairo]' >> Scarb.toml.new
          echo 'unstable-add-statements-code-locations-debug-info = true' >> Scarb.toml.new
          echo 'inlining-strategy = "avoid"' >> Scarb.toml.new
          mv Scarb.toml.new Scarb.toml
          echo "Recreated Scarb.toml with proper formatting"
          cat Scarb.toml

      - name: Validate Scarb.toml configuration
        run: |
          cd ./packages/snfoundry/contracts
          echo "Current directory: $(pwd)"
          
          if [ ! -f Scarb.toml ]; then
            echo "Error: Scarb.toml is missing in the current directory" 
            exit 1
          fi
          
          echo "Scarb.toml content:"
          cat Scarb.toml
          
          if ! grep -q '\[profile.dev.cairo\]' Scarb.toml; then
            echo "Error: Missing [profile.dev.cairo] section in Scarb.toml" 
            exit 1
          fi
          
          if ! grep -q 'unstable-add-statements-code-locations-debug-info = true' Scarb.toml; then
            echo "Error: Missing unstable-add-statements-code-locations-debug-info setting in Scarb.toml" 
            exit 1
          fi
          
          if ! grep -q 'inlining-strategy = "avoid"' Scarb.toml; then
            echo "Error: Missing inlining-strategy setting in Scarb.toml" 
            exit 1
          fi
          
          echo "Scarb.toml validation successful: Configuration for coverage is present"
          
      - name: Compile with scarb before testing
        run: |
          cd ./packages/snfoundry/contracts
          echo "Compiling with scarb in directory: $(pwd)"
          scarb build
          echo "Scarb build completed successfully"
          
      - name: Run snforge tests without coverage first
        run: |
          cd ./packages/snfoundry/contracts
          echo "Running snforge tests without coverage first to verify functionality"
          snforge test
          echo "Basic tests passed, now trying with coverage"

      - name: Run snforge tests with coverage
        run: |
          cd ./packages/snfoundry/contracts
          echo "Running snforge tests with coverage in directory: $(pwd)"
          export PATH="$HOME/.local/bin:$PATH"
          which snforge
          snforge test --coverage
          echo "Coverage tests completed"

      - name: Setup node env
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: "yarn"
          #cache-dependency-path: packages/nextjs/yarn.lock

      - name: Install dependencies (Next.js)
        run: yarn install --immutable
        working-directory: ./packages/nextjs

      - name: Install root dependencies
        run: yarn install --immutable

      - name: Check Code Format
        run: yarn format:check

      - name: Run Next.js lint
        run: yarn next:lint --max-warnings=0
        working-directory: ./packages/nextjs

      - name: Check typings on Next.js
        run: yarn next:check-types
        working-directory: ./packages/nextjs

      - name: Run Next.js tests
        run: yarn test run
        working-directory: ./packages/nextjs

      - name: Build Next.js project
        run: yarn build
        working-directory: ./packages/nextjs
